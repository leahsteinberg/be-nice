html.
	<div id="anchor"></div>
	<script src="http://localhost:8045/socket.io/socket.io.js"></script>
	<script src="http://fb.me/react-0.10.0.js"></script>
	<script src="http://fb.me/JSXTransformer-0.10.0.js"></script>
	<script src="http://code.jquery.com/jquery-1.10.0.min.js"></script>
	<script type="text/jsx">
		/** @jsx React.DOM */
		var socket;
				
		var ChatModule = React.createClass({
			getInitialState: function(){
				return {up_messages: [], down_messages:[], current_message: '', direction_flag: true};
			},
			loadCommentsFromServer: function(){
				console.log("trying to get stuff from server");
				$.ajax({
					type: "GET",
					url: this.props.url,
					dataType: 'json',
					success: function(data){
						this.setState({up_messages: data['up_messages'], down_messages: data['down_messages']});
						console.log("data is:", data);
						console.log("this state is", this.state);
					}.bind(this),
					error: function(xhr, status, err){
						console.error(this.props.url, status, err.toString());
					}.bind(this),
				});
			},
			componentWillMount: function(){
				socket = io.connect('http://localhost:8045');
				socket.on('news', function(data){
					console.log(data);
					socket.emit('my other event', { my: 'data' });
					console.log("handshake sent with SOCKET");
				});
				this.loadCommentsFromServer();
				/// set interval would go here
			},
			onTyping: function(e){
				this.setState({current_message: e.target.value});
			},
			handleSubmit: function(e){
				var that = this;
				var new_message = e.target.value;
				if(this.state.direction_flag){
				this.state.up_messages.push({text: this.state.current_message});
			}
			else{
				this.state.down_messages.unshift({text: this.state.current_message});
			}	

				this.setState({direction_flag: !this.state.direction_flag});
				var formData = {
						'text': this.state.current_message,
						'direction_flag': !this.state.direction_flag
					};
				e.preventDefault();
				console.log('socket is', socket)
				socket.emit('name', "hi");

				//text: that.state.current_message, direction_flag: !that.state.direction_flag});
				
				that.setState({current_message: ''});
			},
			render: function(){
				var inputStyle = {
					position: "fixed",
					top: "50%",
					left: "50%",
					marginTop: "-50px",
					marginLeft: "-100px"
				}
				var divStyle = {
					textAlign: "center"
				};
				return (<div>
						<ChatScreen messages={this.state.up_messages}/>
						<form onSubmit={this.handleSubmit} value="Post">
						<input  type ="text" value={this.state.current_message} onChange={this.onTyping}/>
						<button>chat</button>
						</form>
						<ChatScreen messages={this.state.down_messages}/>
						</div>);
			}
		});
		var ChatScreen = React.createClass({
			render: function(){
				var messages = this.props.messages.map(function(message){
					return (<ChatMessage text={message.text}/>);
				});
				return (<div>{messages}</div>);
			}
		});
		var ChatMessage = React.createClass({
			render: function(){
				return(<div>{this.props.text}</div>);
			}
		});
		React.renderComponent(<ChatModule url="/chats" pollInterval={2000}/>, document.getElementById("anchor"));
	</script>
	</body>